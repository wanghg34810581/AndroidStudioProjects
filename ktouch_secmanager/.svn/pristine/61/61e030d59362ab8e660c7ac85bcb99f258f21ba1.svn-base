package com.guli.secmanager.flowmonitor;

import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.telephony.SmsManager;
import android.telephony.TelephonyManager;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.style.AbsoluteSizeSpan;
import android.text.style.SubscriptSpan;
import android.util.Log;
import android.util.TypedValue;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;

import com.guli.secmanager.R;
import com.guli.secmanager.Utils.ShareUtil;
import com.guli.secmanager.Utils.UnitConverter;
import com.guli.secmanager.widget.WaveRoundProgress;

import org.w3c.dom.Text;

import tmsdk.bg.module.network.ITrafficCorrectionListener;
import tmsdk.bg.module.network.ProfileInfo;
import tmsdk.common.ErrorCode;
import tmsdk.common.IDualPhoneInfoFetcher;
import tmsdk.common.TMSDKContext;

public class FlowMonitorActivity extends AppCompatActivity {
    private final String TAG ="FlowMonitorActivity";

    private Button mAutoCalibration;
    private TextView mTotalLeft, mDetail, mLeftCommonSize, mLeftFreeSize;//, mNetworkManager, mTrafficRanking;
    private TextView mWebTime, mMusicTime, mVideoTime, mChatTime;
    private WaveRoundProgress mWaveBar;
    private SmsReceiver receiver = new SmsReceiver();
    String mquerycode = "";
    String mqueryport = "";
    private SharedPreferences sPreferences;
    private SharedPreferences.Editor editor;
    private ActionBar mActionBar;
    private ImageButton mActionBarButton, mActionbarSettings;
    private RelativeLayout actionbarLayout;
    private Context mContext;
    private Timer timer;
    private boolean isCorrectSuccess;

    private final static int rateWeb = 2 * 1024;//2M/小时
    private final static int rateMusic = 30 * 1024;
    private final static int rateVideo = 120 * 1024;
    private final static int rateChat = 1 * 1024;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_flowmonitor);
        mContext = getApplicationContext();

        setStatusBarColor(true);
        initActionBar();
        /*if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            Window window = getWindow();
            window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS
                    | WindowManager.LayoutParams.FLAG_TRANSLUCENT_NAVIGATION);
            window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                    | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);
            window.addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
            window.setStatusBarColor(Color.TRANSPARENT);
            window.setNavigationBarColor(Color.TRANSPARENT);
        }

        //动态设置actionBar高度 start
        actionbarLayout = (RelativeLayout) findViewById(R.id.layout_actionbar);
        android.view.ViewGroup.LayoutParams pp = actionbarLayout.getLayoutParams();
        actionbarLayout.getLayoutParams();
        Log.e(TAG, "pp.height=" + pp.height);
        //40dp UED设计actionBar高度
        int pxActionBar = dip2px(mContext, 40);
        int pxStatusBar = getStatusBarHeight(mContext);
        Log.e(TAG, "pxStatusBar=" + pxStatusBar + ",pxActionBar=" + pxActionBar);
        pp.height = pxStatusBar + pxActionBar;
        actionbarLayout.setLayoutParams(pp);
        //动态设置actionBar高度 end*/

        sPreferences = getSharedPreferences(ShareUtil.DATABASE_NAME, Context.MODE_PRIVATE);
        editor = sPreferences.edit();

        /*ActionBar actionbar = getSupportActionBar();
        actionbar.setDisplayHomeAsUpEnabled(true);
        actionbar.setElevation(0);
        actionbar.setHomeAsUpIndicator(R.drawable.sec_actionbar_back);
        Resources r = getResources();
        Drawable myDrawable = r.getDrawable(R.drawable.titlegray);
        actionbar.setBackgroundDrawable(myDrawable);*/

        mTotalLeft = (TextView) findViewById(R.id.total_left_size);

        mDetail = (TextView) findViewById(R.id.detail);
        if(true == UnitConverter.isTosApkInstalled(mContext)){
            mDetail.setOnClickListener(mOnClickListener);
        }else{
            mDetail.setVisibility(View.GONE);
        }
        //mNetworkManager = (TextView) findViewById(R.id.network_manager);
        //mTrafficRanking = (TextView) findViewById(R.id.traffic_ranking);
        mLeftCommonSize = (TextView) findViewById(R.id.total_common_size);
        mLeftFreeSize = (TextView) findViewById(R.id.left_free_size);
        mAutoCalibration = (Button)findViewById(R.id.autocalibration);
        UnitConverter.updateButtonBg2(getApplicationContext(), mAutoCalibration);
        //mActionbarButton = (ImageButton) findViewById(R.id.actionbar_icon);
        //mActionbarSettings = (ImageButton) findViewById(R.id.actionbar_settings);

        mWebTime = (TextView) findViewById(R.id.webpage_time);
        mMusicTime = (TextView) findViewById(R.id.music_time);
        mVideoTime = (TextView) findViewById(R.id.video_time);
        mChatTime = (TextView) findViewById(R.id.chat_time);

        //mNetworkManager.setOnClickListener(mOnClickListener);
        //mTrafficRanking.setOnClickListener(mOnClickListener);
        mAutoCalibration.setOnClickListener(mOnClickListener);
        //mActionbarButton.setOnClickListener(mOnClickListener);
        //mActionbarSettings.setOnClickListener(mOnClickListener);

        mWaveBar = (WaveRoundProgress) findViewById(R.id.wavebar);
/*
        SeekBar seek_bar1 = (SeekBar) findViewById(R.id.seek_bar1);
        SeekBar seek_bar2 = (SeekBar) findViewById(R.id.seek_bar2);
        SeekBar seek_bar3 = (SeekBar) findViewById(R.id.seek_bar3);
        SeekBar seek_bar4 = (SeekBar) findViewById(R.id.seek_bar4);
        seek_bar1.setOnSeekBarChangeListener(onSeekBarChangeListener);
        seek_bar2.setOnSeekBarChangeListener(onSeekBarChangeListener);
        seek_bar3.setOnSeekBarChangeListener(onSeekBarChangeListener);
        seek_bar4.setOnSeekBarChangeListener(onSeekBarChangeListener);
*/
    }

    /*private SeekBar.OnSeekBarChangeListener onSeekBarChangeListener = new SeekBar.OnSeekBarChangeListener() {

        @Override
        public void onStopTrackingTouch(SeekBar seekBar) {

        }

        @Override
        public void onStartTrackingTouch(SeekBar seekBar) {

        }

        @Override
        public void onProgressChanged(SeekBar seekBar, int progress,
                                      boolean fromUser) {

            Log.e("flow", "progress=" + progress + ",seekBar=" + seekBar);
            switch (seekBar.getId()) {
                case R.id.seek_bar1:
                    mWaveBar.setOmegaByProgress(progress);
                    break;
                case R.id.seek_bar2:
                    mWaveBar.setWaveHeightByProgress(progress);
                    break;
                case R.id.seek_bar3:
                    mWaveBar.setMoveSpeedByProgress(progress);
                    break;
                case R.id.seek_bar4://高度
                    mWaveBar.setHeightOffsetByProgress(progress);
                    break;
                default:
                    break;
            }
        }
    };*/

    /**
     * 根据手机的分辨率从 dp 的单位 转成为 px(像素)
     */
    public static int dip2px(Context context, float dpValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (dpValue * scale + 0.5f);
    }

    /**
     * 根据手机的分辨率从 px(像素) 的单位 转成为 dp
     */
    public static int px2dip(Context context, float pxValue) {
        final float scale = context.getResources().getDisplayMetrics().density;
        return (int) (pxValue / scale + 0.5f);
    }


    public static int getStatusBarHeight(Context context) {
        int result = 0;
        int resourceId = context.getResources().getIdentifier("status_bar_height", "dimen",
                "android");
        if (resourceId > 0) {
            result = context.getResources().getDimensionPixelSize(resourceId);
        }
        return result;
    }

    @Override
    public void onResume () {
        super.onResume();
        //IntentFilter filter = new IntentFilter();
        //filter.setPriority(1000);
        //filter.addAction("android.provider.Telephony.SMS_RECEIVED");
        //registerReceiver(receiver, filter);

        setFlowLeftSize();
    }

    private void setFlowLeftSize(){

        int mAllFlow = sPreferences.getInt(ShareUtil.FLOW_ALL_TOTAL_FOR_MONTH, 0);
        int mAllUsedFlow = sPreferences.getInt(ShareUtil.FLOW_ALL_USED_FOR_MONTH, 0);
        int mAllLeftFlow = mAllFlow -mAllUsedFlow;

        if(mAllUsedFlow < 0){
            mAllLeftFlow = 0;
        }

        int iCommonTotal = sPreferences.getInt(ShareUtil.SIM1_COMMON_TOTAL_KBYTES, 0);
        int iFreeTotal = sPreferences.getInt(ShareUtil.SIM1_FREE_TOTAL_KBYTES, 0);

        int mPercentage = 0;
        Log.v(TAG, "mAllFolw="+mAllFlow+",mAllUsedFlow="+mAllUsedFlow
                +",iCommonTotal="+iCommonTotal+",iFreeTotal="+iFreeTotal);
        //运营商只返回剩余流量
        if(((iCommonTotal <= 0) && (iFreeTotal <= 0))){
            mPercentage = 0;
            int iCommonLeft = sPreferences.getInt(ShareUtil.SIM1_COMMON_LEFT_KBYTES, 0);
            int iFreeLeft = sPreferences.getInt(ShareUtil.SIM1_FREE_LEFT_KBYTES, 0);
            mAllLeftFlow = iCommonLeft + iFreeLeft;
        }else{
            if((mAllLeftFlow <= 0)){
                mPercentage = 0;
            }else{
                mPercentage = (int)((mAllLeftFlow*100)/mAllFlow);
            }
            //Log.v(TAG, "mPercentage="+mPercentage);
        }

        mWaveBar.setPercent(mPercentage);

        mTotalLeft.setText(String.valueOf(mAllLeftFlow / 1024));

        String strFlowSize;
        //不能区分当前是4G或标准流量。暂时显示相同
        int leftCommonFlow = sPreferences.getInt(ShareUtil.SIM1_COMMON_LEFT_KBYTES, -1);
        if(leftCommonFlow == -1){
            strFlowSize = "0";
        }else{
            strFlowSize = String.valueOf(leftCommonFlow/1024);
        }
        /*int strLong = strFlowSize.length();
        SpannableString score = new SpannableString(strFlowSize);
        score.setSpan(new AbsoluteSizeSpan(30, true), 0, strLong - 1, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        score.setSpan(new AbsoluteSizeSpan(10, true), strLong - 1, strLong, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        score.setSpan(new SubscriptSpan(), strLong - 1, strLong, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        mLeftStandardSize.setText(score);*/
        mLeftCommonSize.setText(strFlowSize + "M");

        int iLeftFree = sPreferences.getInt(ShareUtil.SIM1_FREE_LEFT_KBYTES, 0);
        mLeftFreeSize.setText(String.valueOf(iLeftFree/1024) + "M");


        mWebTime.setText(String.valueOf((mAllLeftFlow/rateWeb)) + "小时");
        mMusicTime.setText(String.valueOf(mAllLeftFlow/rateMusic) + "小时");
        mVideoTime.setText(String.valueOf(mAllLeftFlow/rateVideo) + "小时");
        mChatTime.setText(String.valueOf(mAllLeftFlow/rateChat) + "小时");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        FlowCorrectWrapper.getInstance().setTrafficCorrectionListener(null);
        //unregisterReceiver(receiver);
    }

    /*@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu items for use in the action bar
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.flow_monitor_actionbar, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        switch (item.getItemId()) {
            case android.R.id.home:
                this.finish();
                return true;
            case R.id.flow_settings:
                Intent intent = new Intent();
                intent.setClass(FlowMonitorActivity.this,FlowSettingActivity.class);
                startActivity(intent);
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }*/

    private View.OnClickListener mOnClickListener = new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            if(v.getId() == R.id.autocalibration){
                TelephonyManager telephonyManager = (TelephonyManager)getSystemService(TELEPHONY_SERVICE);
                //if(telephonyManager.getSimState()==TelephonyManager.SIM_STATE_ABSENT){
                //     Toast.makeText(FlowMonitorActivity.this,"暂无法校准流量",Toast.LENGTH_SHORT).show();
                //   Log.d("wangqch","now this phone has no sim");
                //      return;
                // }
                init();
                int resultcode = FlowCorrectWrapper.getInstance().requeatProfileInfo(IDualPhoneInfoFetcher.FIRST_SIM_INDEX);
                Log.d("FlowMonitorActivity", "now resultcode is =" + String.valueOf(resultcode) + "errorcode=" + ErrorCode.ERR_NONE);
                if(resultcode == ErrorCode.ERR_NONE){
                    mAutoCalibration.setText(R.string.flow_correcting);
                }else{
                    Toast.makeText(FlowMonitorActivity.this,"卡1校准失败",Toast.LENGTH_LONG).show();
                }
               /** SharedPreferences sharedPreferences = getSharedPreferences(ShareUtil.DATABASE_NAME, Context.MODE_PRIVATE);
                String imsi = sharedPreferences.getString(ShareUtil.SIMI_IMSI, "-1");
                String currentImsi = telephonyManager.getSubscriberId();
                SharedPreferences.Editor editor = sharedPreferences.edit();
                editor.putString(ShareUtil.SIMI_IMSI, currentImsi);
                editor.commit();
                Log.d("TrafficCorrection", "wanqch imsi=" + imsi + "   " + "currentImsi=" + currentImsi);
                if(!imsi.equals("-1") && !currentImsi.equals(imsi)){*/
                    Log.d("TrafficCorrection","now is TMSDKContext.onImsiChanged();");
                    isCorrectSuccess = false;
                    timer = new Timer();
                    setTimerTask();

               // }

            }else if(v.getId() == R.id.actionbar_icon){
                finish();
            }else if(v.getId() == R.id.actionbar_settings){
                Intent intent = new Intent();
                intent.setClass(FlowMonitorActivity.this, FlowSettingActivity.class);
                startActivity(intent);
                overridePendingTransition(R.anim.in_from_right,R.anim.out_to_left);
            }else if(v.getId() == R.id.detail){
                PackageInfo packageInfo1;
                try {
                    packageInfo1 = getApplicationContext().getPackageManager().getPackageInfo("com.ty.mobiledatamanager", 0);
                } catch (PackageManager.NameNotFoundException e) {
                    packageInfo1 = null;
                    //e.printStackTrace();
                }
                Log.v(TAG, "detail!!! packageInfo1="+packageInfo1);
                if(packageInfo1 != null){
                    Intent i = new Intent();
                    i.setClassName("com.ty.mobiledatamanager", "com.ty.mobiledatamanager.activity.TrafficRankingActivity");
                    startActivity(i);
                }
            }/*else if(v.getId() == R.id.network_manager){
                PackageInfo packageInfo1;
                try {
                    packageInfo1 = getApplicationContext().getPackageManager().getPackageInfo("com.ty.mobiledatamanager", 0);
                } catch (PackageManager.NameNotFoundException e) {
                    packageInfo1 = null;
                    //e.printStackTrace();
                }
                Log.e(TAG, "detail!!! packageInfo1="+packageInfo1);
               if(packageInfo1 != null){
                    Intent i = new Intent();
                    i.setClassName("com.ty.mobiledatamanager", "com.ty.mobiledatamanager.activity.NetworkManagerActivity");
                    startActivity(i);

               }
            }*/
        }
    };

    private void setStatusBarColor(boolean flag) {
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            int mStatusColor = this.getResources().getColor(R.color.flow_monitor_bg_color);
            this.getWindow().setStatusBarColor(mStatusColor);
        }
    }

    /*private void initActionBar() {
        mActionBar = getSupportActionBar();
        mActionBar.setDisplayOptions(ActionBar.DISPLAY_HOME_AS_UP | ActionBar.DISPLAY_SHOW_TITLE);
        mActionBar.setBackgroundDrawable(this.getResources().getDrawable(R.color.flow_monitor_bg_color));
        mActionBar.setElevation(0);

        String str = getString(R.string.flow_monitor_name);
        SpannableStringBuilder mSpanStrBuilder = new SpannableStringBuilder(str);
        mSpanStrBuilder.setSpan(new AbsoluteSizeSpan(17, true), 0, 4, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        mActionBar.setTitle(mSpanStrBuilder);
    }*/

    private void initActionBar() {
        mActionBarButton = (ImageButton) findViewById(R.id.actionbar_icon);
        mActionbarSettings = (ImageButton) findViewById(R.id.actionbar_settings);

        mActionBarButton.setOnClickListener(mOnClickListener);
        mActionbarSettings.setOnClickListener(mOnClickListener);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
            TypedValue outValue = new TypedValue();
            getTheme().resolveAttribute(android.R.attr.selectableItemBackgroundBorderless, outValue, true);
            mActionBarButton.setBackgroundResource(outValue.resourceId);
            mActionbarSettings.setBackgroundResource(outValue.resourceId);
        }else{
            mActionBarButton.setBackgroundResource(R.drawable.ic_arrow_blue_selectors);
            mActionbarSettings.setBackgroundResource(R.drawable.ic_arrow_blue_selectors);
        }
    }

    public void init(){
        FlowCorrectWrapper.getInstance().init(getApplicationContext());

        FlowCorrectWrapper.getInstance().setTrafficCorrectionListener(new ITrafficCorrectionListener() {

            @Override
            public void onNeedSmsCorrection(int simIndex, String queryCode, String queryPort) {
                android.util.Log.v("FlowMonitorActivity", "onNeedSmsCorrection--simIndex:[" + simIndex + "]--queryCode:[" +
                        queryCode + "]queryPort:[" + queryPort + "]");
                //receiver.setHandle(uiHandler, queryPort);
                SmsReceiver.han = uiHandler;
                SmsReceiver.mQueryPort = queryPort;
                SmsManager smsManager = SmsManager.getDefault();
                smsManager.sendTextMessage(queryPort, null, queryCode, null, null);

                mquerycode = queryCode;
                mqueryport = queryPort;
                isCorrectSuccess = true;

            }

            @Override
            public void onTrafficInfoNotify(int simIndex, int trafficClass, int subClass, int kBytes) {
                Toast.makeText(FlowMonitorActivity.this, R.string.correct_finish, Toast.LENGTH_LONG).show();
                android.util.Log.v("FlowMonitorActivity", "wangqch onTrafficNotify-");
                mAutoCalibration.setClickable(true);
                /*SharedPreferences sharedPreferences = getSharedPreferences(ShareUtil.DATABASE_NAME, Context.MODE_PRIVATE);
                //leftCommonFlow = sharedPreferences.getInt(ShareUtil.SIM1_COMMON_LEFT_KBYTES, -1);
                int left4GFlow = sharedPreferences.getInt(ShareUtil.SIM1_4G_LEFT_KBYTES,-1);
                int leftFreeFlow = sharedPreferences.getInt(ShareUtil.SIM1_FREE_LEFT_KBYTES,-1);


                String strFlowSize = String.valueOf(leftCommonFlow/1024+"M");
                int strLong = strFlowSize.length();

                /*SpannableString score = new SpannableString(strFlowSize);
                score.setSpan(new AbsoluteSizeSpan(30, true), 0, strLong - 1, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                score.setSpan(new AbsoluteSizeSpan(10, true), strLong - 1, strLong, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                score.setSpan(new SubscriptSpan(), strLong - 1, strLong, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
                mLeftStandardSize.setText(strFlowSize);*///zouchl delete
                Message message = new Message();
                message.what = 4;
                uiHandler.sendMessage(message);
                setFlowLeftSize();
                /**SharedPreferences sharedPreferences = getSharedPreferences(ShareUtil.DATABASE_NAME, Context.MODE_PRIVATE);
                int totalCommonFlow = sharedPreferences.getInt(ShareUtil.SIM1_COMMON_TOTAL_KBYTES, 0);
                int usedCommonFlow = sharedPreferences.getInt(ShareUtil.SIM1_COMMON_USED_KBYTES,0);
                int totalFreeFlow = sharedPreferences.getInt(ShareUtil.SIM1_FREE_TOTAL_KBYTES,0);
                int usedFreeFlow = sharedPreferences.getInt(ShareUtil.SIM1_FREE_USED_KBYTES,0);
                if(totalCommonFlow == 0 || usedCommonFlow == 0 || totalFreeFlow == 0 || usedFreeFlow == 0){
                    Intent intent = new Intent();
                    intent.setClass(FlowMonitorActivity.this,FlowManuallySetings.class);
                    startActivity(intent);
                }*/
            }

            @Override
            public void onProfileNotify(int i, ProfileInfo profileInfo) {
                super.onProfileNotify(i, profileInfo);
                Log.d("wangqch", "now is in onProfileNotify");
                SharedPreferences sharedPreferences = getSharedPreferences(ShareUtil.DATABASE_NAME, Context.MODE_PRIVATE);
                String closingDay = sharedPreferences.getString(ShareUtil.ACCOUNT_DATE,"1");
                int result = FlowCorrectWrapper.getInstance().setConfig(i,
                        String.valueOf(profileInfo.province), String.valueOf(profileInfo.city), profileInfo.carry, String.valueOf(profileInfo.brand), Integer.parseInt(closingDay));
                if(result != ErrorCode.ERR_NONE){
                    Toast.makeText(FlowMonitorActivity.this,"卡1校准失败",Toast.LENGTH_LONG).show();
                    Message message = new Message();
                    message.what = 4;
                    uiHandler.sendMessage(message);
                    return;
                }
                Log.d("wangqch", "result=" + String.valueOf(profileInfo.province) + " " + String.valueOf(profileInfo.city) + " " + profileInfo.carry + " " + String.valueOf(profileInfo.brand));
                SharedPreferences.Editor editor = sharedPreferences.edit();
                editor.putString(ShareUtil.PROVINCE,String.valueOf(profileInfo.province));
                editor.putString(ShareUtil.CITY,String.valueOf(profileInfo.city));
                editor.putString(ShareUtil.OPERATOR,profileInfo.carry);
                editor.putString(ShareUtil.BRAND,String.valueOf(profileInfo.brand));
                editor.commit();
                //if (result != ErrorCode.ERR_NONE) {
                //    Toast.makeText(FlowMonitorActivity.this, "set config error : " + result, Toast.LENGTH_LONG).show();
                //}
                int retCode = FlowCorrectWrapper.getInstance().startCorrection(IDualPhoneInfoFetcher.FIRST_SIM_INDEX);
                if(retCode != ErrorCode.ERR_NONE){
                    Toast.makeText(FlowMonitorActivity.this,"卡1校准失败",Toast.LENGTH_LONG).show();
                    Message message = new Message();
                    message.what = 4;
                    uiHandler.sendMessage(message);
                }

            }

            @Override
            public void onError(int simIndex, int errorCode) {
                Toast.makeText(FlowMonitorActivity.this,"卡1校准失败",Toast.LENGTH_LONG).show();
                Message message = new Message();
                message.what = 4;
                uiHandler.sendMessage(message);

                if (IDualPhoneInfoFetcher.FIRST_SIM_INDEX == simIndex) {
                    // mTVSim1Detail.setText(strState);
                } else if (IDualPhoneInfoFetcher.SECOND_SIM_INDEX == simIndex) {
                    // mTVSim2Detail.setText(strState);
                }
                android.util.Log.v("FlowMonitorActivity", "onError--simIndex:[" + simIndex + "]errorCode:[" + errorCode + "]");
            }
        });



    }

    /**
     * 校正成功提示
     */
    //private final int MSG_TRAFfICT_NOTIFY = 0x1a;

    /***
     * 需要发送短信
     */
    //private final int MSG_NEED_SEND_MSG = 0x1b;


    Handler uiHandler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {

                //case MSG_TRAFfICT_NOTIFY:
                    //String logTemp = (String) msg.obj;
                   // if(IDualPhoneInfoFetcher.FIRST_SIM_INDEX == msg.arg1){
//                    }else if(IDualPhoneInfoFetcher.SECOND_SIM_INDEX == msg.arg1){
                  //      mTVSim2Detail.setText(mTVSim2Detail.getText() + logTemp);
                 //   }
                  //  break;
                //case MSG_NEED_SEND_MSG:
                  //  if(IDualPhoneInfoFetcher.FIRST_SIM_INDEX == msg.arg1){
                  //      mTVSim1Detail.setText(mTVSim1Detail.getText() + (String) msg.obj);
                 //   }else if(IDualPhoneInfoFetcher.SECOND_SIM_INDEX == msg.arg1){
                 //       mTVSim2Detail.setText(mTVSim2Detail.getText() + (String) msg.obj);
                 //   }
                   // break;
                case 3:
                    String message = msg.obj.toString();
                    startanalysisSMS(message);
                    Log.d("wangqch","now message content is"+message);
                    break;
                case 4:
                    mAutoCalibration.setText(R.string.flow_auto_correct);
                    break;
                case 5:
                    if(!isCorrectSuccess){
                        mAutoCalibration.setText(R.string.flow_auto_correct);
                        Toast.makeText(FlowMonitorActivity.this,"网络问题卡1校准失败，请稍候再试",Toast.LENGTH_LONG).show();
                    }
                    timer.cancel();

            }
        }
    };

    public void startanalysisSMS(final String message){
        new Thread(new Runnable(){
            @Override
            public void run() {
                String strDetail = "";

                //if(IDualPhoneInfoFetcher.FIRST_SIM_INDEX == simIndexF){
                FlowCorrectWrapper.getInstance().analysisSMS(IDualPhoneInfoFetcher.FIRST_SIM_INDEX,
                        mquerycode,
                        mqueryport,
                        message);
                strDetail += "[" + mquerycode + "][" + mqueryport + "]\n[" +
                        message + "]\n";

                //}else if(IDualPhoneInfoFetcher.SECOND_SIM_INDEX == simIndexF){
               // FlowCorrectWrapper.getInstance().analysisSMS(IDualPhoneInfoFetcher.SECOND_SIM_INDEX,
               //         mquerycode,
               //         mqueryport,
               //         message);
               // strDetail += "[" + mquerycode + "][" + mqueryport + "]\n[" +
               //         message + "]\n";
                //}
                //Message msg = uiHandler.obtainMessage(MSG_NEED_SEND_MSG,IDualPhoneInfoFetcher.FIRST_SIM_INDEX,0);
                //msg.obj = strDetail;
                //msg.sendToTarget();
            }

        }).start();
    }

    private void setTimerTask(){
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                Message message = new Message();
                message.what = 5;
                uiHandler.sendMessage(message);
            }
        },10000);
    }
}